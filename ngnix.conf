user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  1024;
}
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  keepalive_timeout  65;
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }
  server {
    listen       80;
    server_name  localhost;
    # resolver     8.8.8.8 8.8.4.4;
    resolver     208.67.222.220 208.67.222.222;
    # declare token is "" (empty str) for original request without args,because $is_args concat any var will be `?`
    set $token "";
    # if the request has args update token to "&"
    # request without args doesn't make sense in this case
    if ($is_args) {
      set $token "&";
    }
    # file created on container start from env vars (40-create-ghcred.sh)
    include "/GH_OAUTH_CLIENT.conf";
    # reverse proxy to github access_token
    # set rule to /auth explicitly
    location = /auth {
      set $args "${args}${token}client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}";
      proxy_pass https://github.com/login/oauth/access_token$is_args$args;
      proxy_set_header accept "application/json";
    }
    # default rule to access app
    location / {
      root   /app;
      index  index.html;
      try_files $uri $uri/ /index.html;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}












